using W6OP.CallParser

public class Class1
    {
        readonly PrefixFileParser _PrefixFileParser;
        CallLookUp _CallLookUp;
        List<string> _Records;  // = new List<string>();

		 public Class1()
        {
            _PrefixFileParser = new PrefixFileParser();
        }

		// Load the prefix fle. If a file path is passed in then load that file.
        // Otherwise use the embedded resource file for the prefix list.
		private void ParsePrefixFile (string filePath) 
		{
			 _PrefixFileParser.ParsePrefixFile("");
			 //_PrefixFileParser.ParsePrefixFile(filePath);

			  _CallLookUp = new CallLookUp(_PrefixFileParser);
		}

		/// <summary>
        /// Single call lookup.
        /// </summary>
        public IEnumerable<Hit> LookupCall(string call)
        {
            if (_CallLookUp == null)
            {
                return null;
            }

            return _CallLookUp.LookUpCall(call);
        }

		/// <summary>
        /// Batch lookup of call signs. A List<string> of calls may be sent in
        /// and each processed in parallel. A limit of 1 million per batch is
        /// enforced as Microsoft Windows cannot handle the memory requirements for larger
        /// collections (32 bit).
        /// 
        /// Why return IEnumerable<Hit>.
        /// Does code that calls the method only expect to iterate over it? Return an IEnumerable.
        /// A caller that gets an IEnumerable result knows that if they want indexed access of the result, 
        /// they will have to convert to a List, because IEnumerable simple isn't capable 
        /// of it until it's been enumerated and put into an indexed structure. 
		/// If I returned a List, I've taken away the ability to stream results which can have its own performance benefits. 
        /// </summary>
        public IEnumerable<Hit> LookupCall(List<string> callSigns)
        {
            if (_CallLookUp == null)
            {
                return null;
            }

            return _CallLookUp.LookUpCall(callSigns);
        }


		} // end class